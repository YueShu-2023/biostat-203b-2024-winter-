---
title: "Biostat 203B Homework 5-Logistic Regression"
subtitle: Due Mar 22 @ 11:59PM
author: "Yue Shu, 106332516"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

```{r}
library(GGally)
library(gtsummary)
library(tidyverse)
library(tidymodels)
library(glmnet)
library(ranger)
library(stacks)
library(vip)

# load data
mimic_icu_cohort <- readRDS("mimic_icu_cohort.rds")

# data preprocessing
mimic_icu_cohort <- mimic_icu_cohort %>%
  mutate(los_long = ifelse(los > 2, "long", "short"))%>%
  select(subject_id, hadm_id, stay_id,
         first_careunit,gender,age_intime,
         los_long,race,marital_status,
         "Bicarbonate",Creatinine,
         Potassium,Sodium,Chloride,
         Hematocrit,"White Blood Cells",
         Glucose,"Heart Rate","Respiratory Rate",
         "Temperature Fahrenheit",
         "Non Invasive Blood Pressure diastolic",
         "Non Invasive Blood Pressure systolic")

tbl_summary(mimic_icu_cohort,
  by = los_long
)
```

```{r}
# split data
set.seed(203)
mimic_icu_cohort <- mimic_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

data_split <- initial_split(
  mimic_icu_cohort, 
  strata = "los_long", 
  prop = 0.5
  )

mimic_other <- training(data_split)
dim(mimic_other)

mimic_test <- testing(data_split)
dim(mimic_test)
```

```{r}
#receipe
rec <- recipe(los_long ~ ., data = mimic_other) |>
  step_rm(subject_id, hadm_id, stay_id) |>
  step_impute_mean("Non Invasive Blood Pressure diastolic",
                   "Non Invasive Blood Pressure systolic")|>
  step_impute_median("Temperature Fahrenheit",
                     "Respiratory Rate",
                     "Heart Rate")|>
  step_impute_mode(marital_status)|>
  step_impute_bag(Bicarbonate,Creatinine,
                  Potassium,Sodium,Chloride,
                  Glucose,Hematocrit,
                  "White Blood Cells") |>
  step_dummy(all_nominal_predictors()) |>
  step_zv(all_numeric_predictors()) |> 
  step_normalize(all_numeric_predictors())
  
logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = FALSE) |>
  print()

logit_wf <- workflow() |>
  add_recipe(rec) |>
  add_model(logit_mod) |>
  print()

param_grid <- grid_regular(
  penalty(range = c(-4, 2)), 
  mixture(),
  levels = c(100, 5)
  ) |>
  print()

set.seed(1)
folds <- vfold_cv(mimic_other, v = 5)

logit_fit <- logit_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy),
    control = control_stack_grid()
    )

logit_fit |>
  # aggregate metrics from K folds
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV AUC") +
  scale_x_log10()

best_logit <- logit_fit |>
  select_best("roc_auc")
best_logit

# Final workflow
final_wf <- logit_wf |>
  finalize_workflow(best_logit)
final_wf

# Fit the whole training set, then predict the test cases
final_fit <- 
  final_wf |>
  last_fit(data_split)
final_fit

# Test metrics
final_fit |> 
  collect_metrics()

final_fit |>
  extract_fit_parsnip() |>
  vip()

saveRDS(logit_fit,file = "logistic_regression_model.rds")
```